@using Telerik.Web.Mvc.UI
@model Klmsncamp.Models.RequestIssue
@{
    ViewBag.Title = "İş İstek Düzenleme";
}
<script src="@Url.Content("~/Scripts/chosen.jquery.js")" type="text/javascript"></script>
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/chosen.css")" />
<script type="text/javascript">
    function TimePickerSet24h() {
        var picker = $("#StartDate").data("tDateTimePicker");
        picker.timeView.format = "HH:mm";
        picker.timeView.bind();
    }
    function EndTimePickerSet24h() {
        var picker = $("#EndDate").data("tDateTimePicker");
        picker.timeView.format = "HH:mm";
        picker.timeView.bind();
    }

    function onRequestActualReasonIDChange(e) {
        var combo = $("#RequestActualReasonID").data("tComboBox");
        if (combo.value() > 0) {
            $('#rqreason-box').show();
        }
        else {
            $('#rqreason-box').hide();
        }
    }

    var fields = 0;
    function addInput() {
        if (fields != 5) {
            document.getElementById('add-file-field').innerHTML += "<input id='files-to-upload' type='file' name='file' /><br />";
            fields += 1;
        } else {
            document.getElementById('add-file-field').innerHTML += "<br />Bir Seferde En çok 5 Dosya Eklenebilir";
            document.getElementById('addfile').disabled = true;
        }
    }
</script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
@{ Html.Telerik().ScriptRegistrar()
        .OnDocumentReady(@<text> var comboreason = $("#RequestActualReasonID").data("tComboBox");
    if (comboreason.value() > 0 ){ $('#rqreason-box').show();} else { $('#rqreason-box').hide();}
    var windowElement = $('#RequestIssueLogs'); var undoButton= $('#undo'); undoButton
    .bind('click', function(e) { windowElement.data('tWindow').open(); undoButton.hide();
    }) .toggle(!windowElement.is(':visible')); windowElement.bind('close', function()
    { undoButton.show(); }); var windowElement_survey = $('#RequestIssueSurveys'); var
    undoButton_survey= $('#undo_survey'); undoButton_survey.bind('click', function(e)
    { alert(windowElement_survey); windowElement_survey.data('tWindow').open(); undoButton_survey.hide();
    }) .toggle(!windowElement_survey.is(':visible')); windowElement_survey.bind('close',
    function() { undoButton_survey.show(); }); $(".chzn-choices input").live('hover',
    function(){ $('.chzn-container').css('zIndex',1); $(this).closest('.chzn-container').css('zIndex',100);
    }); $(".chzn-select").chosen(); $(".chzn-select-deselect").chosen({ allow_single_deselect:
    true });
    </text>); }
<div align="center" style="width: 640px; margin-left: auto; margin-right: auto; margin-top: 30px;">
    @using (Html.BeginForm("Editp", "RequestIssue", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.ValidationSummary(true)
        @Html.HiddenFor(model => model.RequestIssueID)
        @Html.HiddenFor(model => model.Pre1EndDate)
        @Html.HiddenFor(model => model.Pre2EndDate)
        <fieldset class="module aligned ">
            <table style="width: 100%; margin-top: 15px;">
                <tbody>
                    <thead>
                        <th colspan="2">
                            İş İstek Düzenleme
                        </th>
                    </thead>
                    @if (ViewBag.MultipleWorkshops == true)
                    {
                        <tr>
                            <td style="vertical-align: middle; text-align: right;">
                                @Html.LabelFor(model => model.WorkshopID)
                            </td>
                            <td style="color: #A80000; vertical-align: middle; text-align: left;">
                                @if (Model.IsApproved == true)
                                {
                                    @Html.HiddenFor(model => model.WorkshopID)
                                    @Html.DisplayFor(model => model.Workshop.Description)
                                }
                                else if (!User.IsInRole("administrators") || !User.IsInRole("moderators"))
                                {
                                    @Html.HiddenFor(model => model.WorkshopID)
                                    @Html.DisplayFor(model => model.Workshop.Description)
                                }
                                else
                                {
                                    <br />
                                    @(Html.Telerik().ComboBox()
                                    .Name("WorkshopID")
                                    .HtmlAttributes(new { id = "ComboBox_wrapper_workshop" })
                                    .AutoFill(true).HtmlAttributes(new { style = "width:210px;" }).DropDownHtmlAttributes(new { style = "width: 210px;" }).InputHtmlAttributes(new { style = "vertical-align: middle; font-size:100%; border: 1px solid; width: 200px;" })
                                    .BindTo((SelectList)ViewBag.WorkshopID)
                                    .Filterable(filtering => filtering.FilterMode((AutoCompleteFilterMode)Enum.Parse(typeof(AutoCompleteFilterMode), "2", false)))
                                    .HighlightFirstMatch(true)
                                    )
                                    <br />
                                    @Html.ValidationMessageFor(model => model.WorkshopID)
                                }
                            </td>
                        </tr>
                    }
                    else
                    {
                       @Html.HiddenFor(model => model.WorkshopID)
                    }
                        
                    <tr>
                        <td style="vertical-align: middle; text-align: right;">
                            @Html.LabelFor(model => model.LocationID)
                        </td>
                        <td style="color: #A80000; vertical-align: middle; text-align: left;">
                            @if (!User.IsInRole("administrators") || Model.IsApproved == true)
                            {
                                @Html.HiddenFor(model => model.LocationID)
                                @Html.DisplayFor(model => model.Location.Description)
                            }
                            else
                            {
                                <br />
                                @(Html.Telerik().ComboBox()
                                .Name("LocationID")
                                .HtmlAttributes(new { id = "ComboBox_wrapper_location" })
                                .AutoFill(true).HtmlAttributes(new { style = "width:210px;" }).DropDownHtmlAttributes(new { style = "width: 210px;" }).InputHtmlAttributes(new { style = "vertical-align: middle; font-size:100%; border: 1px solid; width: 200px;" })
                                .BindTo((SelectList)ViewBag.LocationID)
                                .Filterable(filtering => filtering.FilterMode((AutoCompleteFilterMode)Enum.Parse(typeof(AutoCompleteFilterMode), "2", false)))
                                .HighlightFirstMatch(true)
                                )
                                <br />
                                @Html.ValidationMessageFor(model => model.LocationID)
                            }
                        </td>
                    </tr>
                    <tr>
                        <td style="vertical-align: middle; text-align: right;">
                            @Html.LabelFor(model => model.PersonnelID)
                        </td>
                        <td style="color: #A80000; vertical-align: middle; text-align: left;">
                            @if (Model.IsApproved == true)
                            {
                                @Html.HiddenFor(model => model.PersonnelID)
                           try
                           {
                                @Model.Personnel.FullName
                           }
                           catch
                           {
                                @:--

                           }
                            }
                            else
                            {
                                <br />
                                @(Html.Telerik().ComboBox()
                    .Name("PersonnelID")
                    .HtmlAttributes(new { id = "ComboBox_wrapper_personnel" })
                    .AutoFill(true).HtmlAttributes(new { style = "width:210px;" }).DropDownHtmlAttributes(new { style = "width: 210px;" }).InputHtmlAttributes(new { style = "vertical-align: middle; font-size:100%; border: 1px solid; width: 200px;" })
                    .BindTo((SelectList)ViewBag.PersonnelID)
                    .Filterable(filtering => filtering.FilterMode((AutoCompleteFilterMode)Enum.Parse(typeof(AutoCompleteFilterMode), "2", false)))
                    .HighlightFirstMatch(true))
                                <br />
                                @Html.ValidationMessageFor(model => model.PersonnelID)
                            }
                        </td>
                    </tr>
                    <tr>
                        <td style="vertical-align: middle; text-align: right;">
                            @Html.LabelFor(model => model.InventoryID)
                        </td>
                        <td style="color: #A80000; vertical-align: middle; text-align: left;">
                            @if (Model.IsApproved == true)
                            {
                                try
                                {
                                @Model.Inventory.Description
                                }
                                catch
                                {
                                @:--

                                }
                            }
                            else
                            {
                                @Html.DropDownList("InventoryID", String.Empty)
                                @Html.ValidationMessageFor(model => model.InventoryID)
                            }
                        </td>
                    </tr>
                    <tr>
                        <td style="vertical-align: middle; text-align: right;">
                            @Html.LabelFor(model => model.RequestTypeID)
                        </td>
                        <td style="color: #A80000; vertical-align: middle; text-align: left;">
                            @if ((!User.IsInRole("administrators") && !User.IsInRole("moderators")) || Model.IsApproved == true)
                            {
                                @Html.HiddenFor(model => model.RequestTypeID)
                                @Html.DisplayFor(model => model.RequestType.Description)
                            }
                            else
                            {
                                @Html.DropDownList("RequestTypeID", String.Empty)
                                @Html.ValidationMessageFor(model => model.RequestTypeID)
                            }
                        </td>
                    </tr>
                    @if ((!User.IsInRole("administrators") && !User.IsInRole("moderators")) || Model.IsApproved == true)
                    {
                        <tr>
                            <td style="vertical-align: middle; text-align: right;">
                                @Html.LabelFor(model => model.Projects)
                            </td>
                            <td style="color: #A80000; vertical-align: middle; text-align: left;">
                                <ul>
                                    @foreach (var xprojitem in this.Model.Projects)
                                    {
                                        <li>@xprojitem.MultiboxDescription</li>
                                    }
                                </ul>
                            </td>
                        </tr>
                        <tr>
                            <td style="vertical-align: middle; text-align: right;">
                                @Html.LabelFor(model => model.Locations)
                            </td>
                            <td style="color: #A80000; vertical-align: middle; text-align: left;">
                                <ul>
                                    @foreach (var xlocalitem in this.Model.Locations)
                                    {
                                        <li>@xlocalitem.CapitalizedDescription</li>
                                    }
                                </ul>
                            </td>
                        </tr>
                        <tr>
                            <td style="vertical-align: middle; text-align: right;">
                                @Html.LabelFor(model => model.CorporateAccounts)
                            </td>
                            <td style="color: #A80000; vertical-align: middle; text-align: left;">
                                <ul>
                                    @foreach (var xcorpitem in this.Model.CorporateAccounts)
                                    {
                                        <li>@xcorpitem.Title</li>
                                    }
                                </ul>
                            </td>
                        </tr>
                        <tr>
                            <td style="vertical-align: middle; text-align: right;">
                                @Html.LabelFor(model => model.Personnels)
                            </td>
                            <td style="color: #A80000; vertical-align: middle; text-align: left;">
                                <ul>
                                    @foreach (var xpersitem in this.Model.Personnels)
                                    {
                                        <li>@xpersitem.FullName</li>
                                    }
                                </ul>
                            </td>
                        </tr>

                    }
                    else
                    {

                        <tr>
                            <td style="vertical-align: middle; text-align: right;">
                                @Html.LabelFor(model => model.Projects)
                            </td>
                            <td align="left" style="text-align: left;">
                                @Html.ListBox("DetailProjectID", null, new { @class = "chzn-select", style = "width: 350px;" })
                            </td>
                        </tr>
                        <tr>
                            <td style="vertical-align: middle; text-align: right;">
                                @Html.LabelFor(model => model.Locations)
                            </td>
                            <td align="left" style="text-align: left;">
                                @Html.ListBox("DetailLocationID", null, new { @class = "chzn-select", style = "width: 350px;" })
                            </td>
                        </tr>
                        <tr>
                            <td style="vertical-align: middle; text-align: right;">
                                @Html.LabelFor(model => model.CorporateAccounts)
                            </td>
                            <td align="left" style="text-align: left;">
                                @Html.ListBox("DetailCorporateAccountID", null, new { @class = "chzn-select", style = "width: 350px;" })
                            </td>
                        </tr>
                        <tr>
                            <td style="vertical-align: middle; text-align: right;">
                                @Html.LabelFor(model => model.Personnels)
                            </td>
                            <td align="left" style="text-align: left;">
                                @Html.ListBox("DetailPersonnelID", null, new { @class = "chzn-select", style = "width: 350px;" })
                            </td>
                        </tr>
                    }
                    <tr>
                        <td style="vertical-align: middle; text-align: right;">
                            Ek Dosyalar
                        </td>
                        @if ((!User.IsInRole("administrators") && !User.IsInRole("moderators")) || Model.IsApproved == true)
                        {
                            <td style="color: #A80000; vertical-align: middle; text-align: left;">
                                <ul>
                                    @foreach (var xfileitem in this.Model.RequestIssueFiles)
                                    {
                                        <li>@Html.ActionLink(xfileitem.RequestIssueFileName + " (indir)", "DownloadRequestIssueFile", new { id = xfileitem.RequestIssueFileID })&nbsp;(@asMb(xfileitem.RequestIssueFileSize)&nbsp;Mb</li>

                                    }
                                </ul>
                            </td>
                        }
                        else
                        {

                            <td style="vertical-align: middle; text-align: left;">
                                <ul>
                                    <li>
                                        <input type="button" class="default" value="Ekle" onclick="javascript: addInput();"
                                            id="addfile" /></li>
                                    @foreach (var xfileitem in this.Model.RequestIssueFiles)
                                    {
                                        <li>@Html.ActionLink("(Sil)", "DeleteRequestIssueFile", new { id = xfileitem.RequestIssueFileID, rqid = this.Model.RequestIssueID, show = ViewBag.show, page = ViewBag.page })&nbsp;|&nbsp;@Html.ActionLink(xfileitem.RequestIssueFileName + " (indir)", "DownloadRequestIssueFile", new { id = xfileitem.RequestIssueFileID })&nbsp;(@asMb(xfileitem.RequestIssueFileSize)&nbsp;Mb)</li>

                                    }
                                </ul>
                                <br />
                                <div id="add-file-field">
                                </div>
                            </td>
                        }
                    </tr>
                    <tr>
                        <td style="vertical-align: middle; text-align: right;">
                            @Html.LabelFor(model => model.RequestStateID)
                        </td>
                        <td style="color: #A80000; vertical-align: middle; text-align: left;">
                            @if ((!User.IsInRole("administrators") && !User.IsInRole("moderators")) || Model.IsApproved == true)
                            {
                                @Html.HiddenFor(model => model.RequestStateID)
                                @Html.DisplayFor(model => model.RequestState.Description)
                            }
                            else
                            {
                                @Html.DropDownList("RequestStateID", String.Empty)
                                @Html.ValidationMessageFor(model => model.RequestStateID)
                            }
                        </td>
                    </tr>
                    <tr>
                        <td style="height: auto; vertical-align: top; text-align: right;">
                            @Html.LabelFor(model => model.DetailedDescription)
                        </td>
                        <td style="color: #A80000; vertical-align: top; text-align: left;">
                            @if ((!User.IsInRole("administrators") && !User.IsInRole("moderators")) || Model.IsApproved == true)
                            {
                                @Html.HiddenFor(model => model.DetailedDescription)
                                @Model.DetailedDescription
                            }
                            else
                            {
                                @Html.TextAreaFor(model => model.DetailedDescription, new { cols = "50", rows = "4" })
                                @Html.ValidationMessageFor(model => model.DetailedDescription)
                            }
                        </td>
                    </tr>
                    <tr>
                        <td style="vertical-align: middle; text-align: right;">
                            @Html.LabelFor(model => model.StartDate)
                        </td>
                        <td style="color: #A80000; vertical-align: middle; text-align: left;">
                            @if (!User.IsInRole("administrators") || Model.IsApproved == true)
                            {
                                @Html.HiddenFor(model => model.StartDate)
                                @Model.StartDate
                            }
                            else
                            {
                                @Html.Telerik().DateTimePickerFor(model => model.StartDate).Name("StartDate").ClientEvents(events => events.OnLoad("TimePickerSet24h"))
                                @Html.ValidationMessageFor(model => model.StartDate)
                            }
                        </td>
                    </tr>
                    <tr>
                        <td style="vertical-align: middle; text-align: right;">
                            @Html.LabelFor(model => model.SendEmail)
                        </td>
                        <td style="color: #A80000; vertical-align: middle; text-align: left;">
                            @if ((!User.IsInRole("administrators") && !User.IsInRole("moderators")) || Model.IsApproved == true)
                            {
                                @Html.HiddenFor(model => model.SendEmail)
                           if (Model.SendEmail == true)
                           {
                                @:EVET
                    }
                           else
                           {
                                @:HAYIR
                    }
                            }
                            else
                            {
                                @Html.EditorFor(model => model.SendEmail)
                                @Html.ValidationMessageFor(model => model.SendEmail)
                            }
                        </td>
                    </tr>
                    <tr>
                        <td style="height: auto; vertical-align: top; text-align: right;">
                            @Html.LabelFor(model => model.Note)
                        </td>
                        <td style="color: #A80000; vertical-align: top; text-align: left;">
                            @if ((!User.IsInRole("administrators") && !User.IsInRole("moderators")) || Model.IsApproved == true)
                            {
                                @Html.HiddenFor(model => model.Note)
                                @Model.Note
                            }
                            else
                            {
                                @Html.TextAreaFor(model => model.Note, new { cols = "50", rows = "4" })
                                @Html.ValidationMessageFor(model => model.Note)
                            }
                        </td>
                    </tr>
                    <tr>
                        <td style="vertical-align: middle; text-align: right;">
                            @Html.LabelFor(model => model.EndDate)
                        </td>
                        <td style="color: #A80000; vertical-align: middle; text-align: left;">
                            @if (!User.IsInRole("administrators") || Model.IsApproved)
                            {
                                @Html.DisplayFor(model => model.EndDate)
                                @Html.HiddenFor(model => model.EndDate)

                            }
                            else
                            {

                                @Html.Telerik().DateTimePickerFor(model => model.EndDate).Name("EndDate").ClientEvents(events => events.OnLoad("EndTimePickerSet24h"))
                                @Html.ValidationMessageFor(model => model.EndDate)

                            }
                            @if (ViewBag.EndDatePostponeErr != "")
                            {
                                <br />@ViewBag.EndDatePostponeErr
                            }
                        </td>
                    </tr>
                    <tr>
                        <td style="vertical-align: middle; text-align: right;">
                            @Html.LabelFor(model => model.RequestActualReasonID, "İş Talep Esas Nedeni")&nbsp;
                        </td>
                        <td style="vertical-align: middle; text-align: left;">
                            @if ((!User.IsInRole("administrators") && !User.IsInRole("moderators")) || Model.IsApproved == true)
                            {
                                @Html.HiddenFor(model => model.RequestActualReasonID)
                                <font style="color: #A80000;">@Html.DisplayFor(model => model.RequestActualReason.Description)</font>
                            }
                            else
                            {
                                <br />
                                @(Html.Telerik().ComboBox()
                                .Name("RequestActualReasonID")
                                .HtmlAttributes(new { id = "ComboBox_wrapper_requestactualreason" })
                                .AutoFill(true).HtmlAttributes(new { style = "width:210px;" }).DropDownHtmlAttributes(new { style = "width: 210px;" }).InputHtmlAttributes(new { style = "vertical-align: middle; font-size:100%; border: 1px solid; width: 200px;" })
                                .BindTo((SelectList)ViewBag.RequestActualReasonID)
                                .Filterable(filtering => filtering.FilterMode((AutoCompleteFilterMode)Enum.Parse(typeof(AutoCompleteFilterMode), "2", false)))
                                .HighlightFirstMatch(true)
                                .ClientEvents(events => events.OnChange("onRequestActualReasonIDChange"))
                                )
                                <br />
                            }
                            @Html.ValidationMessageFor(model => model.RequestActualReasonID)
                        </td>
                    </tr>
                    <tr id="rqreason-box">
                        <td style="vertical-align: middle; text-align: right;">
                            Talep Nedeni Detay Açıklama&nbsp;
                        </td>
                        <td align="left" style="text-align: left;">
                            @if ((!User.IsInRole("administrators") && !User.IsInRole("moderators")) || Model.IsApproved == true)
                            {
                                @Html.HiddenFor(model => model.RequestActualReasonNote)
                                <font style="color: #A80000;">@Html.DisplayFor(model => model.RequestActualReasonNote)</font>
                            }
                            else
                            {

                                @Html.TextAreaFor(model => model.RequestActualReasonNote, new { cols = "60", rows = "4" })<br />
                                @Html.ValidationMessageFor(model => model.RequestActualReasonNote)
                            }
                        </td>
                    </tr>
                    <tr>
                        <td style="vertical-align: middle; text-align: right;">
                            @Html.LabelFor(model => model.IsAllDay)
                        </td>
                        <td style="color: #A80000; vertical-align: middle; text-align: left;">
                            @if ((!User.IsInRole("administrators") && !User.IsInRole("moderators")) || Model.IsApproved == true)
                            {
                                @Html.HiddenFor(model => model.IsAllDay)
                           if (Model.IsAllDay == true)
                           {
                                @:EVET
                    }
                           else
                           {
                                @:HAYIR
                    }
                            }
                            else
                            {
                                @Html.EditorFor(model => model.IsAllDay)
                                @Html.ValidationMessageFor(model => model.IsAllDay)
                            }
                        </td>
                    </tr>
                    <tr>
                        <td style="vertical-align: middle; text-align: right;">
                            @Html.LabelFor(model => model.UserReqID)
                        </td>
                        <td style="color: #A80000; vertical-align: middle; text-align: left;">
                            @if (!User.IsInRole("administrators") || Model.IsApproved == true)
                            {
                                @Html.HiddenFor(model => model.UserReqID)
                                @Html.DisplayFor(model => model.UserReq.FullName)
                            }
                            else
                            {
                                @Html.DropDownList("UserReqID", String.Empty)
                                @Html.ValidationMessageFor(model => model.UserReqID)

                            }
                        </td>
                    </tr>
                    <tr>
                        <td style="vertical-align: middle; text-align: right;">
                            @Html.LabelFor(model => model.IsApproved)
                        </td>
                        <td style="color: #A80000; vertical-align: middle; text-align: left;">
                            @if (ViewBag.HasSurvey)
                            {
                                @Html.HiddenFor(model => model.IsApproved)
                           if (Model.IsApproved == true)
                           {
                                <font color="maroon"><b>Bu İş istek kapatılmış ve Anketi Doldurulmuştur. Onay Durumu
                                    değiştirilemez.</b></font>
                                @:<img title="Bu iş istek onaylanarak kapatılmıştır." alt="Tamamlandı" src="@Url.Content("~/Content/images/checked.gif")"/>
                            }
                           else
                           {
                                <font color="maroon"><b>Bu İş istek/talebe ait Anket Doldurulmuştur. Onay Durumu değiştirilemez.</b></font>
                                @:<img title="Açık / Çalışma Sürüyor" alt="Devam Ediyor" src="@Url.Content("~/Content/images/delete.png")"/>

                           }
                            }
                            else
                            {
                                if (Model.IsApproved == true && !User.IsInRole("administrators"))
                                {
                                    @Html.HiddenFor(model => model.IsApproved)
                               if (Model.IsApproved == true)
                               {
                                    @:<img title="Bu iş istek onaylanarak kapatılmıştır." alt="Tamamlandı" src="@Url.Content("~/Content/images/checked.gif")"/>
                                }
                               else
                               {
                                    @:<img title="Açık / Çalışma Sürüyor" alt="Devam Ediyor" src="@Url.Content("~/Content/images/delete.png")"/>
                                }

                                }
                                else if (User.IsInRole("moderators"))
                                {
                                    @Html.EditorFor(model => model.IsApproved)
                                }
                                else if (User.IsInRole("administrators"))
                                {
                                    @Html.EditorFor(model => model.IsApproved)
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.IsApproved)
                               if (Model.IsApproved == true)
                               {
                                    @:<img title="Bu iş istek onaylanarak kapatılmıştır." alt="Tamamlandı" src="@Url.Content("~/Content/images/checked.gif")"/>
                                }
                               else
                               {
                                @:<img title="Açık / Çalışma Sürüyor" alt="Devam Ediyor" src="@Url.Content("~/Content/images/delete.png")"/>

                               }
                                }
                            }
                        </td>
                    </tr>
                    <tr>
                        <td style="vertical-align: middle; text-align: right;">
                            @Html.LabelFor(model => model.UserID, "İş Sahibi")
                        </td>
                        <td style="color: #A80000; vertical-align: middle; text-align: left;">
                            @if (Model.IsApproved == true)
                            {
                                @Html.HiddenFor(model => model.UserID)
                                @Html.DisplayFor(model => model.User.FullName)
                                @Html.ValidationMessageFor(model => model.UserID)
                            }
                            else if (User.IsInRole("administrators") || User.IsInRole("moderators"))
                            {
                                @Html.DropDownList("UserID", String.Empty)
                                @Html.ValidationMessageFor(model => model.UserID)
                            }
                            else
                            {
                                @Html.HiddenFor(model => model.User)
                           try
                           {
                                @Html.DisplayFor(model => model.User.FullName)
                           }
                           catch
                           {
                                @: Henüz Atanmamış..
}
                            }
                        </td>
                    </tr>
                    @Html.HiddenFor(model => model.ValidationStateID)
                    @Html.HiddenFor(model => model.TimeStamp)
                    @Html.Hidden("show", new { value = ViewBag.show })
                    @Html.Hidden("page", new { value = ViewBag.page })
                </tbody>
            </table>
        </fieldset>
        <div class="submit-row">
            <p class="deletelink-box">
                @Html.ActionLink("Vazgeç ve Geri Dön", "Index")&nbsp;|&nbsp;@Html.ActionLink("Sil", "Delete", "RequestIssue", new { id = Model.RequestIssueID, show = ViewBag.show, page = ViewBag.page }, null)</p>
           @if (ViewBag.UpdatePermission)
           {
            <input type="submit" onclick="this.disabled=true;this.value='Lütfen Bekleyiniz..Calisiyor..';this.form.submit();"
                value="Kaydet" />
           }
        </div>

    }
</div>
@helper AlternateBackground(string color)
    {
        if (ViewBag.count == null) { ViewBag.count = 0; }
    <text>style="background-color:@(ViewBag.count % 2 == 1 ? color : "none")"</text>
        ViewBag.count++;
}
@helper TotalDebtSummaryTemplate(WebViewPage page)
    {

    <text>
    <div align="left">
        <table>
            <thead>
                <th>
                    TarihZaman
                </th>
                <th>
                    Kullanıcı
                </th>
                <th>
                    İşlemler
                </th>
            </thead>
            <tbody>
                @foreach (var Log in ViewBag.TheLogs as IList<Klmsncamp.Models.LogRequestIssue>)
                {

                    <tr @AlternateBackground("#E0E0E0")>
                        <td>
                            @Log.ModifyTime
                        </td>
                        <td>
                            @Log.User.FullName
                        </td>
                        <td>
                            @try
                            {
                                foreach (var logdetail in Log.LogRequestIssueDetails)
                                {
                                @logdetail.PropertyName <text>&nbsp;:&nbsp;</text>@logdetail.PropertyOldValue <text>&nbsp;--->&nbsp;</text> @logdetail.PropertyNewValue<br />
                                }
                            }
                            catch
                            { }
                        </td>
                    </tr>

                }
            </tbody>
        </table>
    </div>
    </text>
}
<div style="position: fixed; top: 12%; right: 360px;" align="right">
    <span id="undo" style="position: fixed; top: 12%; right: 360px;" class="t-group">Güncellemeleri
        Göster</span>
    @{ Html.Telerik().Window()
                            .Name("RequestIssueLogs")
                            .Title("Güncelleme Bilgileri")
                            .Draggable(true)
                            .Resizable(resizing => resizing
                                .Enabled(false)

                            )
                            .Modal(false)
                            .Buttons(b => b.Close())
                            .Content(a => TotalDebtSummaryTemplate(this))
                            .Scrollable(true)
                            .Resizable(resizing => resizing
                                            .Enabled(true)
                                            .MinHeight(350)
                                            .MinWidth(350)
                                            .MaxHeight(800)
                                            .MaxWidth(350)
                                        )
                            .Width(320)
                            .Height(350)
                            .Render();
    }
</div>
@helper TotalSurveysTemplate(WebViewPage page)
    {

    <text>
    <div align="left">
        <table>
            <thead>
                <th>
                    Anketler
                </th>
                <th>
                    Tarih
                </th>
            </thead>
            <tbody>
                @foreach (var svtable in ViewBag.TheSurveys as IList<Klmsncamp.Models.SurveyTable>)
                {

                    <tr @AlternateBackground("#E0E0E0")>
                        <td>
                            @Html.ActionLink(svtable.Description, "Edit", "SurveyTable", new { id = svtable.SurveyTableID }, null)
                        </td>
                        <td>
                            @svtable.TimeStamp
                        </td>
                    </tr>

                }
            </tbody>
        </table>
    </div>
    </text>
}
@if (ViewBag.HasSurvey)
{
    <div style="position: fixed; top: 12%; left: 36px;" align="left">
        <span id="undo_survey" style="position: fixed; top: 12%; left: 36px;" class="t-group">
            Anketleri Göster</span>
        @{ Html.Telerik().Window()
                            .Name("RequestIssueSurveys")
                            .Title("Anket Bilgileri")
                            .Draggable(true)
                            .Resizable(resizing => resizing
                                .Enabled(false)

                            )
                            .Modal(false)
                            .Buttons(b => b.Close())
                            .Content(a => TotalSurveysTemplate(this))
                            .Scrollable(true)
                            .Resizable(resizing => resizing
                                            .Enabled(true)
                                            .MinHeight(350)
                                            .MinWidth(350)
                                            .MaxHeight(800)
                                            .MaxWidth(350)
                                        )
                            .Width(320)
                            .Height(350)
                            .Render();
        }
    </div>
}
@functions{
    public string asMb(float number)
    {
        float number_ = number / (1024 * 1024);
        return Math.Round(number_, 3).ToString();
    }
}